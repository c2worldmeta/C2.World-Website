let provider,signer,contractA,firstOpenWindow=!0,CHAIN_ID=534352,CHAIN_NAME="Scroll",PROVIDER_HTTP_URL="https://rpc.scroll.io",CHAIN_EXPLORER="https://scrollscan.com",MINT_VALUE="0.00035",ERC1155_C2WORLD_CONTRACT_ADDRESS="0xe0B5D1A12530FE51139da848a6c909f295352555",Erc1155Abi=[{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"value",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"uint256[]",name:"values",type:"uint256[]"}],name:"burnBatch",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"string",name:"uri",type:"string"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"uint256",name:"balance",type:"uint256"},{internalType:"uint256",name:"needed",type:"uint256"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"ERC1155InsufficientBalance",type:"error"},{inputs:[{internalType:"address",name:"approver",type:"address"}],name:"ERC1155InvalidApprover",type:"error"},{inputs:[{internalType:"uint256",name:"idsLength",type:"uint256"},{internalType:"uint256",name:"valuesLength",type:"uint256"}],name:"ERC1155InvalidArrayLength",type:"error"},{inputs:[{internalType:"address",name:"operator",type:"address"}],name:"ERC1155InvalidOperator",type:"error"},{inputs:[{internalType:"address",name:"receiver",type:"address"}],name:"ERC1155InvalidReceiver",type:"error"},{inputs:[{internalType:"address",name:"sender",type:"address"}],name:"ERC1155InvalidSender",type:"error"},{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"address",name:"owner",type:"address"}],name:"ERC1155MissingApprovalForAll",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"InvalidAddressForAuth",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"data",type:"bytes"}],name:"mintBatch",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"Raffle__NotEnoughEther",type:"error"},{inputs:[],name:"Raffle__NotMintable",type:"error"},{inputs:[],name:"Raffle__TransfetErr",type:"error"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOperator",type:"address"}],name:"setOperator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"setTokenPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"bool",name:"status",type:"bool"}],name:"setUntransferAble",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"address",name:"operator",type:"address"}],name:"UnApproved",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"UnauthorizedAccount",type:"error"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"UntransferAbleError",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"ApprovalForAll",type:"event"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"uint256[]",name:"values",type:"uint256[]"},{internalType:"bytes",name:"data",type:"bytes"}],name:"safeBatchTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"bool",name:"approved",type:"bool"}],name:"setApprovalForAll",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"receiver_",type:"address"}],name:"setReceiver",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"string",name:"newuri",type:"string"}],name:"setURI",outputs:[],stateMutability:"nonpayable",type:"function"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256[]",name:"ids",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"values",type:"uint256[]"}],name:"TransferBatch",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"id",type:"uint256"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"TransferSingle",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"string",name:"value",type:"string"},{indexed:!0,internalType:"uint256",name:"id",type:"uint256"}],name:"URI",type:"event"},{inputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"userMint",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"id",type:"uint256"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address[]",name:"accounts",type:"address[]"},{internalType:"uint256[]",name:"ids",type:"uint256[]"}],name:"balanceOfBatch",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"id",type:"uint256"}],name:"getTokenPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"address",name:"operator",type:"address"}],name:"isApprovedForAll",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"address",name:"opera",type:"address"}],name:"isApproveOrAuth",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"operator",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"receiver",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"id",type:"uint256"}],name:"untransferAble",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"uri",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}],CONTRACT_MEMORY_DATA="0x00000000000000000000000000000000",init=async()=>{isMetaMaskInstalled()?(provider=new ethers.providers.Web3Provider(window.ethereum),document.getElementById("loadingWalletConnect").style.display="block",await checkAndSwitchNetwork(CHAIN_ID),await provider.send("eth_requestAccounts",[]),signer=provider.getSigner(),console.log("Connected to MetaMask"),document.getElementById("loadingWalletConnect").style.display="none",await initContract()):(console.log("MetaMask is not installed."),window.open("https://metamask.io/download.html","_blank"),alert("MetaMask is not installed. Please install MetaMask: https://metamask.io/download.html"))},isMetaMaskInstalled=()=>void 0!==window.ethereum&&window.ethereum.isMetaMask,requestEthChainId=async()=>provider?(await provider.getNetwork()).chainId:null,addChainId=async(e,t,n,a,i)=>{if(provider)try{var r=ethers.utils.hexStripZeros(ethers.utils.hexlify(e));await provider.send("wallet_addEthereumChain",[{chainId:r,chainName:t,rpcUrls:[n],nativeCurrency:a,blockExplorerUrls:[i]}])}catch(e){console.error("Failed to add chain:",e)}},switchChainId=async e=>{if(provider)try{var t=ethers.utils.hexStripZeros(ethers.utils.hexlify(e));await provider.send("wallet_switchEthereumChain",[{chainId:t}]),provider=new ethers.providers.Web3Provider(window.ethereum),signer=provider.getSigner()}catch(e){console.error("Failed to switch chain:",e)}},checkAndSwitchNetwork=async e=>{await requestEthChainId()!==e&&(await addChainId(CHAIN_ID,CHAIN_NAME,PROVIDER_HTTP_URL,{name:"Ether",symbol:"ETH",decimals:18},CHAIN_EXPLORER),await switchChainId(e))},connectMetaMask=async()=>{if(isMetaMaskInstalled())try{document.getElementById("loadingWalletConnect").style.display="block",await checkAndSwitchNetwork(CHAIN_ID),await provider.send("eth_requestAccounts",[]),signer=provider.getSigner(),console.log("Connected to MetaMask"),document.getElementById("loadingWalletConnect").style.display="none",await initContract()}catch(e){document.getElementById("loadingWalletConnect").style.display="none",console.error("Failed to connect to MetaMask:",e)}else firstOpenWindow&&(window.open("https://metamask.io/download.html","_blank"),firstOpenWindow=!1),setTimeout(connectMetaMask,5e3)},connectWalletConnect=async()=>{},initContract=async()=>{contractA=new ethers.Contract(ERC1155_C2WORLD_CONTRACT_ADDRESS,Erc1155Abi,signer),await refreshTasks()},balanceOf=async(e,t)=>contractA?await contractA.balanceOf(e,t):0,mintTokens=async(e,t)=>{if(contractA){if(await checkAndSwitchNetwork(CHAIN_ID),await provider.send("eth_requestAccounts",[]),signer=provider.getSigner(),console.log("Connected to MetaMask"),await initContract(),2===e){var n=await signer.getAddress();if(!(await balanceOf(n,1)).gt(0))return showError("You need to mint the “First Citizen” NFT first"),!1}n=await contractA.userMint(e,t,CONTRACT_MEMORY_DATA,{value:ethers.utils.parseEther(MINT_VALUE)}),e=(console.log("Transaction sent:",n.hash),await n.wait());console.log("Transaction confirmed:",e),await refreshTasks()}},checkIsWalletConnected=async()=>!!provider&&0<(await provider.listAccounts()).length,isAccountAddressMatchConnectedAddress=async e=>!!provider&&(await provider.listAccounts())[0].toLowerCase()===e.toLowerCase(),addGrayOverlay=async e=>{var t=e.querySelector(".overlay"),t=(t&&e.removeChild(t),document.createElement("div"));t.className="overlay",t.innerText="Task Finished",e.appendChild(t)},showError=e=>{document.getElementById("walletNotification").style.display="block";var t=document.getElementsByClassName("c2-notification-notice-description");0<t.length&&(t[0].textContent=e,setTimeout(()=>{document.getElementById("walletNotification").style.display="none"},6e3))},refreshTasks=async()=>{var e,t;provider&&(e=document.getElementsByClassName("task"),t=await signer.getAddress(),2<e.length)&&t&&((await balanceOf(t,1)).gt(0)?addGrayOverlay(e[1]):e[1].addEventListener("click",async()=>{try{await mintTokens(1,1),console.log("Minting process completed successfully.")}catch(e){console.error("Error during minting process:",e.data.message),showError(e.data.message)}}),(await balanceOf(t,2)).gt(0)?addGrayOverlay(e[2]):e[2].addEventListener("click",async()=>{try{await mintTokens(2,1),console.log("Minting process completed successfully.")}catch(e){console.error("Error during minting process:",e.data.message),showError(e.data.message)}}))};document.addEventListener("DOMContentLoaded",()=>{console.log("DOMContentLoaded");var e=document.getElementsByClassName("c2-notification-notice-close");0<e.length&&(e[0].onclick=()=>{var e=document.getElementById("walletNotification");e&&(e.style.display="none")}),void 0!==window.ethereum?(console.log("MetaMask is available"),window.ethereum.on("accountsChanged",e=>{console.log("Accounts changed:",e)}),window.ethereum.on("chainChanged",e=>{console.log("Chain changed to:",parseInt(e,16)),provider=new ethers.providers.Web3Provider(window.ethereum),signer=provider.getSigner()}),window.ethereum.on("connect",e=>{console.log("Connected to network:",e)}),window.ethereum.on("disconnect",e=>{console.error("Disconnected from network:",e)}),window.ethereum.on("message",e=>{console.log("New message:",e)})):console.log("MetaMask is not installed"),lottie.loadAnimation({container:document.getElementById("loadingIcon"),renderer:"svg",loop:!0,autoplay:!0,path:"loadingV2.json"}),init()});